##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##     
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
#if ($schema.getNamespace())
package $this.mangle($schema.getNamespace());
#end
#if ($schema.getDoc())
/** $schema.getDoc() */
#end
#foreach ($annotation in $this.javaAnnotations($schema))
@$annotation
#end
@org.apache.aingle.specific.FixedSize($schema.getFixedSize())
@org.apache.aingle.specific.AIngleGenerated
public class ${this.mangle($schema.getName())} extends org.apache.aingle.specific.SpecificFixed {
  private static final long serialVersionUID = ${this.fingerprint64($schema)}L;
  public static final org.apache.aingle.Schema SCHEMA$ = new org.apache.aingle.Schema.Parser().parse("${this.javaEscape($schema.toString())}");
  public static org.apache.aingle.Schema getClassSchema() { return SCHEMA$; }
  public org.apache.aingle.Schema getSchema() { return SCHEMA$; }

  /** Creates a new ${this.mangle($schema.getName())} */
  public ${this.mangle($schema.getName())}() {
    super();
  }

  /**
   * Creates a new ${this.mangle($schema.getName())} with the given bytes.
   * @param bytes The bytes to create the new ${this.mangle($schema.getName())}.
   */
  public ${this.mangle($schema.getName())}(byte[] bytes) {
    super(bytes);
  }

  private static final org.apache.aingle.io.DatumWriter<${this.mangle($schema.getName())}>
    WRITER$ = new org.apache.aingle.specific.SpecificDatumWriter<${this.mangle($schema.getName())}>(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.aingle.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.aingle.io.DatumReader<${this.mangle($schema.getName())}>
    READER$ = new org.apache.aingle.specific.SpecificDatumReader<${this.mangle($schema.getName())}>(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.aingle.specific.SpecificData.getDecoder(in));
  }

}
